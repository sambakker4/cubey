// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: times.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTime = `-- name: CreateTime :one
INSERT INTO times(id, created_at, updated_at, scramble, user_id)
VALUES(
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, time, scramble, user_id
`

type CreateTimeParams struct {
	Scramble string
	UserID   uuid.UUID
}

func (q *Queries) CreateTime(ctx context.Context, arg CreateTimeParams) (Time, error) {
	row := q.db.QueryRowContext(ctx, createTime, arg.Scramble, arg.UserID)
	var i Time
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Time,
		&i.Scramble,
		&i.UserID,
	)
	return i, err
}

const getTimes = `-- name: GetTimes :many
SELECT id, created_at, updated_at, time, scramble, user_id FROM times
WHERE user_id = $1
ORDER BY created_at
LIMIT $2
`

type GetTimesParams struct {
	UserID uuid.UUID
	Limit  int32
}

func (q *Queries) GetTimes(ctx context.Context, arg GetTimesParams) ([]Time, error) {
	rows, err := q.db.QueryContext(ctx, getTimes, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Time
	for rows.Next() {
		var i Time
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Time,
			&i.Scramble,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
